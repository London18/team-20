;(function(global,undefined){"use strict";function Geolib(){}
Geolib.TO_RAD=Math.PI/180;Geolib.TO_DEG=180/Math.PI;Geolib.PI_X2=Math.PI*2;Geolib.PI_DIV4=Math.PI/4;var geolib=Object.create(Geolib.prototype,{version:{value:"$version$"},radius:{value:6378137},minLat:{value:-90},maxLat:{value:90},minLon:{value:-180},maxLon:{value:180},sexagesimalPattern:{value:/^([0-9]{1,3})Â°\s*([0-9]{1,3}(?:\.(?:[0-9]{1,2}))?)'\s*(([0-9]{1,3}(\.([0-9]{1,2}))?)"\s*)?([NEOSW]?)$/},measures:{value:Object.create(Object.prototype,{"m":{value:1},"km":{value:0.001},"cm":{value:100},"mm":{value:1000},"mi":{value:(1/1609.344)},"sm":{value:(1/1852.216)},"ft":{value:(100/30.48)},"in":{value:(100/2.54)},"yd":{value:(1/0.9144)}})},prototype:{value:Geolib.prototype},extend:{value:function(methods,overwrite){for(var prop in methods){if(typeof geolib.prototype[prop]==='undefined'||overwrite===true){if(typeof methods[prop]==='function'&&typeof methods[prop].bind==='function'){geolib.prototype[prop]=methods[prop].bind(geolib);}else{geolib.prototype[prop]=methods[prop];}}}}}});if(typeof(Number.prototype.toRad)==='undefined'){Number.prototype.toRad=function(){return this*Geolib.TO_RAD;};}
if(typeof(Number.prototype.toDeg)==='undefined'){Number.prototype.toDeg=function(){return this*Geolib.TO_DEG;};}
geolib.extend({decimal:{},sexagesimal:{},distance:null,getKeys:function(point){if(Object.prototype.toString.call(point)=='[object Array]'){return{longitude:point.length>=1?0:undefined,latitude:point.length>=2?1:undefined,elevation:point.length>=3?2:undefined};}
var getKey=function(possibleValues){var key;possibleValues.every(function(val){if(typeof point!='object'){return true;}
return point.hasOwnProperty(val)?(function(){key=val;return false;}()):true;});return key;};var longitude=getKey(['lng','lon','longitude']);var latitude=getKey(['lat','latitude']);var elevation=getKey(['alt','altitude','elevation','elev']);if(typeof latitude=='undefined'&&typeof longitude=='undefined'&&typeof elevation=='undefined'){return undefined;}
return{latitude:latitude,longitude:longitude,elevation:elevation};},getLat:function(point,raw){return raw===true?point[this.getKeys(point).latitude]:this.useDecimal(point[this.getKeys(point).latitude]);},latitude:function(point){return this.getLat.call(this,point);},getLon:function(point,raw){return raw===true?point[this.getKeys(point).longitude]:this.useDecimal(point[this.getKeys(point).longitude]);},longitude:function(point){return this.getLon.call(this,point);},getElev:function(point){return point[this.getKeys(point).elevation];},elevation:function(point){return this.getElev.call(this,point);},coords:function(point,raw){var retval={latitude:raw===true?point[this.getKeys(point).latitude]:this.useDecimal(point[this.getKeys(point).latitude]),longitude:raw===true?point[this.getKeys(point).longitude]:this.useDecimal(point[this.getKeys(point).longitude])};var elev=point[this.getKeys(point).elevation];if(typeof elev!=='undefined'){retval['elevation']=elev;}
return retval;},ll:function(point,raw){return this.coords.call(this,point,raw);},validate:function(point){var keys=this.getKeys(point);if(typeof keys==='undefined'||typeof keys.latitude==='undefined'||keys.longitude==='undefined'){return false;}
var lat=point[keys.latitude];var lng=point[keys.longitude];if(typeof lat==='undefined'||!this.isDecimal(lat)&&!this.isSexagesimal(lat)){return false;}
if(typeof lng==='undefined'||!this.isDecimal(lng)&&!this.isSexagesimal(lng)){return false;}
lat=this.useDecimal(lat);lng=this.useDecimal(lng);if(lat<this.minLat||lat>this.maxLat||lng<this.minLon||lng>this.maxLon){return false;}
return true;},getDistance:function(start,end,accuracy,precision){accuracy=Math.floor(accuracy)||1;precision=Math.floor(precision)||0;var s=this.coords(start);var e=this.coords(end);var a=6378137,b=6356752.314245,f=1/298.257223563;var L=(e['longitude']-s['longitude']).toRad();var cosSigma,sigma,sinAlpha,cosSqAlpha,cos2SigmaM,sinSigma;var U1=Math.atan((1-f)*Math.tan(parseFloat(s['latitude']).toRad()));var U2=Math.atan((1-f)*Math.tan(parseFloat(e['latitude']).toRad()));var sinU1=Math.sin(U1),cosU1=Math.cos(U1);var sinU2=Math.sin(U2),cosU2=Math.cos(U2);var lambda=L,lambdaP,iterLimit=100;do{var sinLambda=Math.sin(lambda),cosLambda=Math.cos(lambda);sinSigma=(Math.sqrt((cosU2*sinLambda)*(cosU2*sinLambda)+(cosU1*sinU2-sinU1*cosU2*cosLambda)*(cosU1*sinU2-sinU1*cosU2*cosLambda)));if(sinSigma===0){return geolib.distance=0;}
cosSigma=sinU1*sinU2+cosU1*cosU2*cosLambda;sigma=Math.atan2(sinSigma,cosSigma);sinAlpha=cosU1*cosU2*sinLambda/sinSigma;cosSqAlpha=1-sinAlpha*sinAlpha;cos2SigmaM=cosSigma-2*sinU1*sinU2/cosSqAlpha;if(isNaN(cos2SigmaM)){cos2SigmaM=0;}
var C=(f/16*cosSqAlpha*(4+f*(4-3*cosSqAlpha)));lambdaP=lambda;lambda=(L+(1-C)*f*sinAlpha*(sigma+C*sinSigma*(cos2SigmaM+C*cosSigma*(-1+2*cos2SigmaM*cos2SigmaM))));}while(Math.abs(lambda-lambdaP)>1e-12&&--iterLimit>0);if(iterLimit===0){return NaN;}
var uSq=(cosSqAlpha*(a*a-b*b)/(b*b));var A=(1+uSq/16384*(4096+uSq*(-768+uSq*(320-175*uSq))));var B=(uSq/1024*(256+uSq*(-128+uSq*(74-47*uSq))));var deltaSigma=(B*sinSigma*(cos2SigmaM+B/4*(cosSigma*(-1+2*cos2SigmaM*cos2SigmaM)-B/6*cos2SigmaM*(-3+4*sinSigma*sinSigma)*(-3+4*cos2SigmaM*cos2SigmaM))));var distance=b*A*(sigma-deltaSigma);distance=distance.toFixed(precision);if(typeof this.elevation(start)!=='undefined'&&typeof this.elevation(end)!=='undefined'){var climb=Math.abs(this.elevation(start)-this.elevation(end));distance=Math.sqrt(distance*distance+climb*climb);}
return this.distance=parseFloat((Math.round(distance/accuracy)*accuracy).toFixed(precision));},getDistanceSimple:function(start,end,accuracy){accuracy=Math.floor(accuracy)||1;var distance=Math.round(Math.acos(Math.sin(this.latitude(end).toRad())*Math.sin(this.latitude(start).toRad())+
Math.cos(this.latitude(end).toRad())*Math.cos(this.latitude(start).toRad())*Math.cos(this.longitude(start).toRad()-this.longitude(end).toRad()))*this.radius);return geolib.distance=Math.floor(Math.round(distance/accuracy)*accuracy);},getCenter:function(coords){if(!coords.length){return false;}
var X=0.0;var Y=0.0;var Z=0.0;var lat,lon,hyp;coords.forEach(function(coord){lat=coord.latitude*Geolib.TO_RAD;lon=coord.longitude*Geolib.TO_RAD;X+=Math.cos(lat)*Math.cos(lon);Y+=Math.cos(lat)*Math.sin(lon);Z+=Math.sin(lat);});var nb_coords=coords.length;X=X/nb_coords;Y=Y/nb_coords;Z=Z/nb_coords;lon=Math.atan2(Y,X);hyp=Math.sqrt(X*X+Y*Y);lat=Math.atan2(Z,hyp);return{latitude:(lat*Geolib.TO_DEG).toFixed(6),longitude:(lon*Geolib.TO_DEG).toFixed(6)};},getBounds:function(coords){if(!coords.length){return false;}
var useElevation=this.elevation(coords[0]);var stats={maxLat:-Infinity,minLat:Infinity,maxLng:-Infinity,minLng:Infinity};if(typeof useElevation!='undefined'){stats.maxElev=0;stats.minElev=Infinity;}
for(var i=0,l=coords.length;i<l;++i){stats.maxLat=Math.max(this.latitude(coords[i]),stats.maxLat);stats.minLat=Math.min(this.latitude(coords[i]),stats.minLat);stats.maxLng=Math.max(this.longitude(coords[i]),stats.maxLng);stats.minLng=Math.min(this.longitude(coords[i]),stats.minLng);if(useElevation){stats.maxElev=Math.max(this.elevation(coords[i]),stats.maxElev);stats.minElev=Math.min(this.elevation(coords[i]),stats.minElev);}}
return stats;},getBoundsOfDistance:function(point,distance){var latitude=this.latitude(point);var longitude=this.longitude(point);var radLat=latitude.toRad();var radLon=longitude.toRad();var radDist=distance/this.radius;var minLat=radLat-radDist;var maxLat=radLat+radDist;var MAX_LAT_RAD=this.maxLat.toRad();var MIN_LAT_RAD=this.minLat.toRad();var MAX_LON_RAD=this.maxLon.toRad();var MIN_LON_RAD=this.minLon.toRad();var minLon;var maxLon;if(minLat>MIN_LAT_RAD&&maxLat<MAX_LAT_RAD){var deltaLon=Math.asin(Math.sin(radDist)/Math.cos(radLat));minLon=radLon-deltaLon;if(minLon<MIN_LON_RAD){minLon+=Geolib.PI_X2;}
maxLon=radLon+deltaLon;if(maxLon>MAX_LON_RAD){maxLon-=Geolib.PI_X2;}}else{minLat=Math.max(minLat,MIN_LAT_RAD);maxLat=Math.min(maxLat,MAX_LAT_RAD);minLon=MIN_LON_RAD;maxLon=MAX_LON_RAD;}
return[{latitude:minLat.toDeg(),longitude:minLon.toDeg()},{latitude:maxLat.toDeg(),longitude:maxLon.toDeg()}];},isPointInside:function(latlng,coords){for(var c=false,i=-1,l=coords.length,j=l-1;++i<l;j=i){if(((this.longitude(coords[i])<=this.longitude(latlng)&&this.longitude(latlng)<this.longitude(coords[j]))||(this.longitude(coords[j])<=this.longitude(latlng)&&this.longitude(latlng)<this.longitude(coords[i])))&&(this.latitude(latlng)<(this.latitude(coords[j])-this.latitude(coords[i]))*(this.longitude(latlng)-this.longitude(coords[i]))/(this.longitude(coords[j])-this.longitude(coords[i]))+
this.latitude(coords[i]))){c=!c;}}
return c;},preparePolygonForIsPointInsideOptimized:function(coords){for(var i=0,j=coords.length-1;i<coords.length;i++){if(this.longitude(coords[j])===this.longitude(coords[i])){coords[i].constant=this.latitude(coords[i]);coords[i].multiple=0;}else{coords[i].constant=this.latitude(coords[i])-(this.longitude(coords[i])*this.latitude(coords[j]))/(this.longitude(coords[j])-this.longitude(coords[i]))+(this.longitude(coords[i])*this.latitude(coords[i]))/(this.longitude(coords[j])-this.longitude(coords[i]));coords[i].multiple=(this.latitude(coords[j])-this.latitude(coords[i]))/(this.longitude(coords[j])-this.longitude(coords[i]));}
j=i;}},isPointInsideWithPreparedPolygon:function(point,coords){var flgPointInside=false,y=this.longitude(point),x=this.latitude(point);for(var i=0,j=coords.length-1;i<coords.length;i++){if((this.longitude(coords[i])<y&&this.longitude(coords[j])>=y||this.longitude(coords[j])<y&&this.longitude(coords[i])>=y)){flgPointInside^=(y*coords[i].multiple+coords[i].constant<x);}
j=i;}
return flgPointInside;},isInside:function(){return this.isPointInside.apply(this,arguments);},isPointInCircle:function(latlng,center,radius){return this.getDistance(latlng,center)<radius;},withinRadius:function(){return this.isPointInCircle.apply(this,arguments);},getRhumbLineBearing:function(originLL,destLL){var diffLon=this.longitude(destLL).toRad()-this.longitude(originLL).toRad();var diffPhi=Math.log(Math.tan(this.latitude(destLL).toRad()/2+Geolib.PI_DIV4)/Math.tan(this.latitude(originLL).toRad()/2+Geolib.PI_DIV4));if(Math.abs(diffLon)>Math.PI){if(diffLon>0){diffLon=(Geolib.PI_X2-diffLon)*-1;}
else{diffLon=Geolib.PI_X2+diffLon;}}
return(Math.atan2(diffLon,diffPhi).toDeg()+360)%360;},getBearing:function(originLL,destLL){destLL['latitude']=this.latitude(destLL);destLL['longitude']=this.longitude(destLL);originLL['latitude']=this.latitude(originLL);originLL['longitude']=this.longitude(originLL);var bearing=((Math.atan2(Math.sin(destLL['longitude'].toRad()-
originLL['longitude'].toRad())*Math.cos(destLL['latitude'].toRad()),Math.cos(originLL['latitude'].toRad())*Math.sin(destLL['latitude'].toRad())-
Math.sin(originLL['latitude'].toRad())*Math.cos(destLL['latitude'].toRad())*Math.cos(destLL['longitude'].toRad()-originLL['longitude'].toRad()))).toDeg()+360)%360;return bearing;},getCompassDirection:function(originLL,destLL,bearingMode){var direction;var bearing;if(bearingMode=='circle'){bearing=this.getBearing(originLL,destLL);}else{bearing=this.getRhumbLineBearing(originLL,destLL);}
switch(Math.round(bearing/22.5)){case 1:direction={exact:"NNE",rough:"N"};break;case 2:direction={exact:"NE",rough:"N"};break;case 3:direction={exact:"ENE",rough:"E"};break;case 4:direction={exact:"E",rough:"E"};break;case 5:direction={exact:"ESE",rough:"E"};break;case 6:direction={exact:"SE",rough:"E"};break;case 7:direction={exact:"SSE",rough:"S"};break;case 8:direction={exact:"S",rough:"S"};break;case 9:direction={exact:"SSW",rough:"S"};break;case 10:direction={exact:"SW",rough:"S"};break;case 11:direction={exact:"WSW",rough:"W"};break;case 12:direction={exact:"W",rough:"W"};break;case 13:direction={exact:"WNW",rough:"W"};break;case 14:direction={exact:"NW",rough:"W"};break;case 15:direction={exact:"NNW",rough:"N"};break;default:direction={exact:"N",rough:"N"};}
direction['bearing']=bearing;return direction;},getDirection:function(originLL,destLL,bearingMode){return this.getCompassDirection.apply(this,arguments);},orderByDistance:function(latlng,coords){var coordsArray=[];for(var coord in coords){var d=this.getDistance(latlng,coords[coord]);coordsArray.push({key:coord,latitude:this.latitude(coords[coord]),longitude:this.longitude(coords[coord]),distance:d});}
return coordsArray.sort(function(a,b){return a.distance-b.distance;});},isPointInLine:function(point,start,end){return this.getDistance(start,point,1,3)+this.getDistance(point,end,1,3)==this.getDistance(start,end,1,3);},findNearest:function(latlng,coords,offset,limit){offset=offset||0;limit=limit||1;var ordered=this.orderByDistance(latlng,coords);if(limit===1){return ordered[offset];}else{return ordered.splice(offset,limit);}},getPathLength:function(coords){var dist=0;var last;for(var i=0,l=coords.length;i<l;++i){if(last){dist+=this.getDistance(this.coords(coords[i]),last);}
last=this.coords(coords[i]);}
return dist;},getSpeed:function(start,end,options){var unit=options&&options.unit||'km';if(unit=='mph'){unit='mi';}else if(unit=='kmh'){unit='km';}
var distance=geolib.getDistance(start,end);var time=((end.time*1)/1000)-((start.time*1)/1000);var mPerHr=(distance/time)*3600;var speed=Math.round(mPerHr*this.measures[unit]*10000)/10000;return speed;},convertUnit:function(unit,distance,round){if(distance===0){return 0;}else if(typeof distance==='undefined'){if(this.distance===null){throw new Error('No distance was given');}else if(this.distance===0){return 0;}else{distance=this.distance;}}
unit=unit||'m';round=(null==round?4:round);if(typeof this.measures[unit]!=='undefined'){return this.round(distance*this.measures[unit],round);}else{throw new Error('Unknown unit for conversion.');}},useDecimal:function(value){if(Object.prototype.toString.call(value)==='[object Array]'){var geolib=this;value=value.map(function(val){if(geolib.isDecimal(val)){return geolib.useDecimal(val);}else if(typeof val=='object'){if(geolib.validate(val)){return geolib.coords(val);}else{for(var prop in val){val[prop]=geolib.useDecimal(val[prop]);}
return val;}}else if(geolib.isSexagesimal(val)){return geolib.sexagesimal2decimal(val);}else{return val;}});return value;}else if(typeof value==='object'&&this.validate(value)){return this.coords(value);}else if(typeof value==='object'){for(var prop in value){value[prop]=this.useDecimal(value[prop]);}
return value;}
if(this.isDecimal(value)){return parseFloat(value);}else if(this.isSexagesimal(value)===true){return parseFloat(this.sexagesimal2decimal(value));}
throw new Error('Unknown format.');},decimal2sexagesimal:function(dec){if(dec in this.sexagesimal){return this.sexagesimal[dec];}
var tmp=dec.toString().split('.');var deg=Math.abs(tmp[0]);var min=('0.'+(tmp[1]||0))*60;var sec=min.toString().split('.');min=Math.floor(min);sec=(('0.'+(sec[1]||0))*60).toFixed(2);this.sexagesimal[dec]=(deg+'Â° '+min+"' "+sec+'"');return this.sexagesimal[dec];},sexagesimal2decimal:function(sexagesimal){if(sexagesimal in this.decimal){return this.decimal[sexagesimal];}
var regEx=new RegExp(this.sexagesimalPattern);var data=regEx.exec(sexagesimal);var min=0,sec=0;if(data){min=parseFloat(data[2]/60);sec=parseFloat(data[4]/3600)||0;}
var dec=((parseFloat(data[1])+min+sec)).toFixed(8);dec=(data[7]=='S'||data[7]=='W')?parseFloat(-dec):parseFloat(dec);this.decimal[sexagesimal]=dec;return dec;},isDecimal:function(value){value=value.toString().replace(/\s*/,'');return(!isNaN(parseFloat(value))&&parseFloat(value)==value);},isSexagesimal:function(value){value=value.toString().replace(/\s*/,'');return this.sexagesimalPattern.test(value);},round:function(value,n){var decPlace=Math.pow(10,n);return Math.round(value*decPlace)/decPlace;}});if(typeof module!=='undefined'&&typeof module.exports!=='undefined'){global.geolib=module.exports=geolib;}else if(typeof define==="function"&&define.amd){define("geolib",[],function(){return geolib;});}else{global.geolib=geolib;}}(this));